<h1>今日のjava</h1>

 <div class="11月6日">
    package chap02;

    public class Code_2_1_2_15 {

	    public static void main(String[] args) {

		    int a;
    		int b;//①変数宣言の文
    		a = 20;//②計算の文（代入）
    		b = a + 5;//③計算の文（足し算して代入）。式と呼ぶ。
    		System.out.println(a);
            System.out.println(b);

            /*
              オペランド…上の「a」「b」「5」のことをいう。
              演算子………上の「+」「＝」のことをいう。
              ↑の全ての式はこの2つの要素だけで構成されています。
              リテラル……オペランドの中でも数字「5」や文字列「Hello World」など、ソースコードに
                          記述されている具体的な値のこと。データ型を持っています。
            */

            System.out.println("私の好きな記号は二重引用符(")です");//javaは前から文字列を認識するためエラーになる"

            System.out.println("私の好きな記号は二重引用符(\")です");
            /*
              \によってダブルクォーテーションは文字としてみなされる。
              \100を表示する場合、￥￥と二つつける。
             */
	    }

    }
 </div>
 <div class="11月7日">
          /*
          ★演算子は周囲のオペランドの情報を使って計算を行い、それらオペランドを巻き込んで結果に化ける。（置き換わる）
          ★式に演算子が複数ある場合は、javaで定められた優先順位の高い演算子から順に評価される。
          ★式の中に同じ優先順位グループに属する演算子が複数ある場合、演算子ごとに決められた「方向」から順に評価される。
          ★3.2/2＝1.6、9/2=4 「/」整数なのでint型。小数点は使えない。小数点の計算をする場合、9.0/2のようにどちらかの
          　オペランドを小数にする。小数にするとダブル型になり、結果が小数で表示される。
          代入演算子…右オペランドの内容を左オペランドの変数に代入する演算子。
          　　　　　　ex)
                         int a = 10
                         a += 5 (a = a+5)
                         a = 15
          単項演算子…++a、++bでは他の演算子と一緒に利用すると微妙に違っていて、実行されたときに表示されるものが変わる。
         */

        double d = 3;//double型変数にint型の3を代入できてしまう。
        String s = "ベスト" + 3;//String型とint型を連結出来てしまう。
        //Javaが式を評価する過程で自動的に型を変換しているからです。
        //ある型で宣言された変数には、その型の値しか代入出来ません。
        //値が自動的に箱の型に変換されて代入されます。
        //型のメモリーが小さいものから大きなものは変換できるが、逆は出来ない。
        float f = 3;//float型の変数にint型を代入
        double d = f;//double型の変数にfloat型を代入
        System.out.println(f);
        System.out.println(d);
        //意味的に「小さな型」の値を「大きな型」の箱に代入する場合、代入される値が代入先の変数の型
        //に自動的に変換されてから代入が行われる
        int i = 3.2;//小数はint型より大きいメモリーが必要なため代入できない
        //byte型やshort型の変数に対して、実害がない範囲でint型リテラルを代入することが例外で認められている。
        int age = (int)3.2;//強制的な型変換（キャスト変換）。3.2をintに型変換して代入せよという意味。
        System.out.println(age);
        //実行結果はint型はあくまで整数型のため小数点以下がなくなる。
        //キャスト演算子は、元のデータの一部を失ってもデータを強制的に変換しようとするため、はみ出た部分は捨てられてしまい、情報の欠損が発生します。
        //異なる型で演算を行った場合は、意味的に大きな型に統一されてから演算が行われる。
        double d = 8.5/2;//2(int型)を2.0(double型)に変換。
        long l = 5 + 2L;//5(int型)を5L(long型)に変換。
        String msg = "私の年齢は" + 23;//23(int型)が”23”(string型)に変換されて連結される。
        //命令実行の文とは…javaが準備してくれている様々な命令を呼び出すための文です。
        String name = "すがわら";//①変数宣言の文
        String message;//①変数宣言の文
        message = name + "さん、こんにちは";//②計算の文
        System.out.println(message);//命令実行の文。(message)は引数またはパラメーター。
        System.out.println();//printlnのlnはline。一行で表示される。
        System.out.print();//続けて表示される。
        int a = 5;
        int b = 3;
        int m = Math.max(a,b);//引数を比較してどちらか大きい数字がmに入る
        String age = "31";
        int n = Integer.parseInt(age);//string型をint型に変換する。
        int r = new java.util.random().nextInt(90);//0~89までの90通りの乱数
        String name = new java.util.Scanner(System.in).nextLine();//キーボードから文字列を受け取る
        int age = new java.util.Scanner(System.in).nextInt();//入力から文字列を受け取る。

 </div>
 <div class="11月8日">
       制御構造…文を実行させる順番のことをいう。（または制御フロー）
    		Thread.sleep(0);…1/1000秒で指定する。1000/1000=1秒。1秒間処理を止める。
    		制御構文…if文やwhile文のような制御構造を表す文のことを言う。
    		ブロック…ブロックとは複数の文をひとまとまりとして扱うものです。
    		　　　　　ブロック内が一文しかない場合、なみかっこを省略していい。
    		     　　　ブロック内で宣言した変数は、そのブロックが終わると同時に消滅します。
    		スコープ…変数が利用可能な範囲。
    		関係演算子…「＝＝」、「＞」など評価されて化けるという特性がある。
    		　　　　　　具体的には関係が成立するならtrue(真)に、そうでないならfalse(偽)に化ける。
    		String strA = "夕日";
    		メモリーの中の例3000番地に記録される。
    		strAに3000番地を記録して実際の3000番地に「夕日」を記録する。
    		strAが呼び出された場合、strAに記録されている番地から参照して呼び出す。
    		int型は変数に直接代入された数字が記録される(基本型)が、String型など頭文字が大文字のデータ型は記録されている番地
    		を参照してその番地から呼び出す（参照型）。
    		String strB = "夕日";

    		strA == strB
    		両方とも番地で登録されているため同じものだと認識されるが

    		String strC = new java.util.Scanner(system.in).nextLine();

    		strA == strB
    		の場合、newで強制的に新しいメモリー用域に記録されるため、別の番地が登録される。
    		そのため、同じ文字列でも別の文字列と認識されてしまう。

    		Str.equals…番地情報のひかくではなく、一文字一文字メモリーに記録されている文字を参照しているため、
    		　　　　　　同じ文字列か正確に出せる、

    		論理演算し…「＆＆」や「｜｜」のこと

    		switch文とは…すべての条件式が「変数＝＝値」や「変数＝＝変数」のような一致するかを比較するしきになっていて
    		　　　　　　　比較する値が小数や真偽値ではない。
    		       　　　条件に一致するcaseラベルまで処理をジャンプさせる命令。
    		          　　break文で明示的に「処理を中断してswitch文をぬける」という指示を出す。
    		break文…そのブロックをぬけるという意味。

    		前置判定…ブロックを実行する前に条件判定を行う。
    		　　　　　なので、初めから条件式の判定がfalseだった場合、一度もブロックが実行されない。
    		後置判定…ブロックを実行した後に条件判定を行う。
    		　　　　　　最低一回はブロックを実行する。
    		for文…繰り返しが始まるにあたり最初に一回だけ実行される文を初期化処理という。
    		　　　ここで使う変数を通常ループ変数という。
    		for(①初期化処理；②繰り返し条件；③繰り返し次処理)
    	　　ループ変数の名前は自由だが、一度宣言している変数は使えない。
    	  　変数はブロックの外に行くと消滅してしまう。

    	   多重構造のことをネストや入れ子という。

    	   continue文…今の周回を中断して同じ繰り返しの次の周回に進む。

    	   無限ループ…永久に繰り返しをし続ける制御構造のこと
</div>
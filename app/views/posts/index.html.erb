for文は配列や範囲オジェクトから要素を取り出し処理を行うことができる構文になります。

基本構文は以下のようになります。

for 変数 in 繰り返し処理するオブジェクト do
 繰り返す処理
end

繰り返しするオブジェクトには配列や範囲オブジェクトを指定することができます。
変数は任意の変数名を指定します。この変数に配列や範囲オブジェクトから取り出された要素
が順番に代入され、繰り返す処理を実行します。

for value in [0, 1, 2, 3] do
 puts value
end

繰り返し処理するオブジェクトに配列[0.1.2.3]と指定すると最初に0が変数valueに代入され、
puts valueを実行します。

次に1が変数valueに代入されputs valueを実行します。

次に2が変数valueに代入され…と処理を繰り返し、最終的に3が変数valueに代入され、
puts valuesを実行するとfor文の処理は終了し、for文を抜けます。

次に範囲オブジェクトをしてみましょう。

for value in 0..3 do 
 puts value
end

繰り返し処理するオブジェクトに範囲オブジェクトの0..3を指定しました。
0..3を指定すると0～3までの数値を順番に処理する動作になります。

範囲オブジェクトは「.」の数で少し動作が変わります。

for value in 0...3 do
 puts value
end

「.」を2個指定した場合は0から3以下まで繰り返し、
「.」を3個指定した場合は0から3未満まで繰り返すというような動作になります。

rubyにおける配列とは、1つのオブジェクトが入っている変数に対して複数のオブジェクト
への参照を可能にする変数です。

簡単に言うとたくさんのオブジェクトを入れておくことのできる変数です。

array = ["red","blue","yellow"]

[]で囲み、””で区切ることで複数のオブジェクトで扱えます。
この[]の中に入っているオブジェクトを要素と呼びます。

sizeとlenghで配列の要素数を取得するほうほう

単純に配列の中に入っている要素数が知りたい場合、length,sizeのメソッドを
使用することで簡単に要素数を取得することができます。

また、countメソッドで条件付きで要素数を取得したり、nilを除いた個数を取得すること
も可能です。

lengthの基本的な使い方
単純に配列に入っている要素の数を知りたい場合、「lengthメソッド」か「sizeメソッド」
を使用しますが、lengthにはarrayクラスとstringクラスの二種類があります。

arrayクラスのlengthメソッドは配列に対して使用し、配列の要素数を返します。

また、stringクラスのlengthメソッドは文字列が入っている変数に対して使用すると
文字数を返します。

array = ["red","blue","yellow"]
str = "侍エンジニア"

p array.length
p str.length

このプログラムの実行結果から、lengthメソッドで配列のサイズと文字列をそれぞれ
取得できることが確認できました。

sizeの基本的な使い方

sizeメソッドはlengthメソッドと全く同じ結果を返します。
配列のサイズを調べるという意味ではlengthよりもコードを見たときに何をしているのか
分かりやすい記述となります。

countで配列の要素数を条件付きで取得する方法

配列の要素を条件付きで数えたい場合、countメソッドを使用します。

countの基本的な使い方

引数に条件を指定することで条件に合った要素の数だけを取得できます。

array = ["red","blue","yellw","red","green"]
p array.count("red")

他にも引数にブロックを渡すことで少し複雑な条件を指定することもできます。

array = [1,2,2,2,2,3,3,1,5]
p array.count{ |num| num % 2 == 0 }

また、引数を指定しないでcountメソッドを使用した場合はlengthやsizeと
同じように要素数を返します。

countでnil(からの要素)を除いた要素数を数える方法

配列にnilが入っていた場合、nilをカウントしたくない！という時にはcountメソッド
に条件をしてします。

array = ["red","blue",nil,"yellow"]
p array.count{ |num| !num.nil? }

